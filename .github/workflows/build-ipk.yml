#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Blog: https://helmiau.com
# HelmiWrt by helmiau.com
# Script base by P3TERX
#=================================================

name: Build IPK

on:
  workflow_dispatch:
    inputs:
      source:
        type: choice
        description: Select Source.
        required: true
        default: openwrt
        options:
        - openwrt
        - immortalwrt
      branch:
        type: choice
        description: Select OpenWrt Branch.
        required: true
        default: 23.05.3
        options:  
        - 21.02.7
        - 22.03.3
        - 23.05.3
        - 23.05.4
      platform:
        type: choice
        description: Select device platform.
        required: true
        default: x86/64
        options: 
        - armvirt/32
        - armvirt/64
        - armsr/armv8
        - bcm27xx/bcm2708
        - bcm27xx/bcm2709
        - bcm27xx/bcm2710
        - bcm27xx/bcm2711
        - rockchip/armv8
        - sunxi/cortexa53
        - sunxi/cortexa7
        - x86/64
        - x86/generic

env:
  CONFIG_FILE: build-ipk/universal.config
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta
  DIY_SH: build-ipk/immortalwrt.sh

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          export FILE_DATE=$(date +"%Y.%m.%d")
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          export SOURCE_WRT=$(echo "${{ github.event.inputs.source }}")
          echo "SOURCE_WRT=$SOURCE_WRT" >> $GITHUB_ENV
          export REPO_BRANCH=$(echo "${{ github.event.inputs.branch }}")
          echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          export PLATFORM=$(echo "${{ github.event.inputs.platform }}")
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          export PLATFORM_SUB=$(echo "$PLATFORM" | sed 's|\/|\-|g')
          echo "PLATFORM_SUB=$PLATFORM_SUB" >> $GITHUB_ENV
          export BRANCH_REL=$(echo "releases/$REPO_BRANCH")
          echo "BRANCH_REL=$BRANCH_REL" >> $GITHUB_ENV
          export BUILD_CONFIG="$GITHUB_WORKSPACE/$CONFIG_FILE"
          echo "BUILD_CONFIG=$BUILD_CONFIG" >> $GITHUB_ENV

      - name: Clone SDK
        id: clone_sdk
        working-directory: /workdir
        run: |
          df -hT $PWD
          
          # Determine the target system (Imagebuilder files naming has changed since 23.05.0)
          if [[ "${REPO_BRANCH:0:2}" -ge "23" && "${REPO_BRANCH:3:2}" -ge "05" ]]; then
              export REPO_SDK=$(echo "https://downloads.${SOURCE_WRT}.org/${BRANCH_REL}/targets/${PLATFORM}/openwrt-sdk-${REPO_BRANCH}-${PLATFORM_SUB}_gcc-12.3.0_musl.Linux-x86_64.tar.xz")
          else
              export REPO_SDK=$(echo "https://downloads.${SOURCE_WRT}.org/${BRANCH_REL}/targets/${PLATFORM}/openwrt-sdk-${REPO_BRANCH}-${PLATFORM_SUB}_gcc-11.2.0_musl.Linux-x86_64.tar.xz")
          fi
    
          echo "REPO_SDK=${REPO_SDK}" >> $GITHUB_ENV
          echo "sdk url:: ${REPO_SDK}"
          wget ${REPO_SDK}
          tar xf *.tar.xz
          rm -f *.tar.xz
          mv ${SOURCE_WRT}-* /workdir/openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          export OPENWRT_ROOT_PATH="$GITHUB_WORKSPACE/openwrt"
          echo "OPENWRT_ROOT_PATH=$OPENWRT_ROOT_PATH" >> $GITHUB_ENV
          echo "BUILD_OPT=$BUILD_OPT" >> $GITHUB_ENV
          echo -e "===== Information ====="
          echo -e "FILE_DATE is ....... $FILE_DATE"
          echo -e "OPENWRT_ROOT_PATH is ....... $OPENWRT_ROOT_PATH"
          echo -e "PLATFORM is ....... $PLATFORM"
          echo -e "===== End of Information ====="
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Load Configuration
        id: load_cfg
        if: steps.clone_sdk.outputs.status == 'success' && !cancelled()
        run: |
          cd $OPENWRT_ROOT_PATH
          chmod +x $GITHUB_WORKSPACE/build-ipk/*.sh
          $GITHUB_WORKSPACE/$DIY_SH
          # cat $GITHUB_WORKSPACE/$CONFIG_FILE >> $OPENWRT_ROOT_PATH/.config
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Install Feeds
        id: install_feeds
        if: steps.load_cfg.outputs.status == 'success' && !cancelled()
        run: |
          cd $OPENWRT_ROOT_PATH
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-23.05" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;openwrt-23.05" >> feeds.conf
          echo "src-git-full luci https://git.openwrt.org/project/luci.git;openwrt-23.05" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;openwrt-23.05"  >> feeds.conf
          echo "src-git modemfeed https://github.com/koshev-msk/modemfeed.git"  >> feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Compile Packages
        id: compile
        if: steps.install_feeds.outputs.status == 'success' && !cancelled()
        run: |
          cd $OPENWRT_ROOT_PATH
          sed -i -e '/^#/d' -i -e '/^[[:blank:]]*$/ d' "${BUILD_CONFIG}"
          echo -e "===== List of Apps ====="
          cat $BUILD_CONFIG
          echo -e "===== List of Apps ====="
          make defconfig
          while IFS= read -r line # Read a line
          do
            make package/${line}/compile -j${nproc} V=w
            find bin/ -type f -name '*${line}*' -exec mv -t ../ipkg {} +
          done < "$BUILD_CONFIG"
          echo "LUCIAPPPATH=$OPENWRT_ROOT_PATH/bin/packages/*/base/luci-app" >> $GITHUB_ENV
          echo "PKGPATH=$OPENWRT_ROOT_PATH/bin/packages/*/base/" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_bin
          path: openwrt/bin

      - name: Generate New Release Tag
        id: tag
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          sleep 10
          echo "release_tag=ipk" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload HelmiWrt Packages to GitHub Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          prerelease: false
          name: IPK Build ${{ env.FILE_DATE }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ env.LUCIAPPPATH }}-*
          body: |
            **HelmiWrt LuCI App and Theme IPK for OpenWrt**
            THESE PACKAGES IS COOLSNOWWOLF LEDE FIRMWARE BASED !!!!! NOT OFFICIAL OPENWRT BASE !!!!
            DWYOR (DO WITH YOUR OWN RISK)
            [Donation here](https://www.helmiau.com/pay) â€¢ [Installation Tutorial](https://www.google.com/search?q=helmiau.com+helmiwrt+packages)
